"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BrowserManager = void 0;
const playwright_1 = require("playwright");
class BrowserManager {
    /**
     * Launch browser based on CLI arg (--project=chrome) or ENV (BROWSER=firefox)
     */
    static async launch() {
        const argBrowser = process.argv.find(arg => arg.startsWith("--project="))?.split("=")[1];
        const envBrowser = process.env.BROWSER;
        const browserName = (argBrowser || envBrowser || "chrome").toLowerCase();
        switch (browserName) {
            case "chrome":
                this.browser = await playwright_1.chromium.launch({ headless: false, channel: "chrome" });
                break;
            case "edge":
                this.browser = await playwright_1.chromium.launch({ headless: false, channel: "msedge" });
                break;
            case "firefox":
                this.browser = await playwright_1.firefox.launch({ headless: false });
                break;
            case "webkit":
            case "safari":
                this.browser = await playwright_1.webkit.launch({ headless: false });
                break;
            default:
                throw new Error(`Unsupported browser: ${browserName}`);
        }
        this.page = await this.browser.newPage();
    }
    /**
     * Returns a shared Page instance. If not created yet, initializes it.
     */
    static async getPage() {
        if (!this.page) {
            await this.launch();
        }
        return this.page;
    }
    /**
     * Gracefully close browser when needed
     */
    static async close() {
        if (this.browser) {
            await this.browser.close();
            this.browser = null;
            this.page = null;
        }
    }
}
exports.BrowserManager = BrowserManager;
BrowserManager.browser = null;
BrowserManager.page = null;
