// import { chromium, firefox, webkit, Browser, Page } from "playwright";
export {};
// export class BrowserManager {
//     private static browser: Browser | null = null;
//     private static page: Page | null = null;
//     /**
//      * Launch browser based on CLI arg (--project=chrome) or ENV (BROWSER=firefox)
//      */
//     private static async launch(): Promise<void> {
//         const argBrowser = process.argv.find(arg => arg.startsWith("--project="))?.split("=")[1];
//         const envBrowser = process.env.BROWSER;
//         const browserName = (argBrowser || envBrowser || "chrome").toLowerCase();
//         switch (browserName) {
//             case "chrome":
//                 this.browser = await chromium.launch({ headless: false, channel: "chrome" });
//                 break;
//             case "edge":
//                 this.browser = await chromium.launch({ headless: false, channel: "msedge" });
//                 break;
//             case "firefox":
//                 this.browser = await firefox.launch({ headless: false });
//                 break;
//             case "webkit":
//             case "safari":
//                 this.browser = await webkit.launch({ headless: false });
//                 break;
//             default:
//                 throw new Error(`Unsupported browser: ${browserName}`);
//         }
//         this.page = await this.browser!.newPage();
//     }
//     /**
//      * Returns a shared Page instance. If not created yet, initializes it.
//      */
//     static async getPage(): Promise<Page> {
//         if (!this.page) {
//             await this.launch();
//         }
//         return this.page!;
//     }
//     /**
//      * Gracefully close browser when needed
//      */
//     static async close(): Promise<void> {
//         if (this.browser) {
//             await this.browser.close();
//             this.browser = null;
//             this.page = null;
//         }
//     }
// }
