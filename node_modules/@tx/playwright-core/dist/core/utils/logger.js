// src/core/utils/logger.ts
import fs from "fs";
import path from "path";
import { test } from "@playwright/test";
export class Logger {
    logToFile;
    logFilePath;
    level;
    levels = ["error", "warn", "info", "debug"];
    constructor(options = {}) {
        this.logToFile = options.logToFile ?? false;
        this.logFilePath =
            options.logFilePath ?? path.resolve(process.cwd(), "playwright-core.log");
        this.level = options.level ?? "info";
    }
    write(level, message) {
        const timestamp = new Date().toISOString();
        const formatted = `[${timestamp}] [${level.toUpperCase()}] ${message}`;
        // Console output
        if (this.levels.indexOf(level) <= this.levels.indexOf(this.level)) {
            console.log(formatted);
            // File output
            if (this.logToFile) {
                fs.appendFileSync(this.logFilePath, formatted + "\n", "utf8");
            }
            // HTML report attachment (inside a running test)
            try {
                test.info().attach("log", {
                    body: formatted,
                    contentType: "text/plain",
                });
            }
            catch {
                // Will throw if called outside Playwright test context
            }
        }
    }
    info(msg) {
        this.write("info", msg);
    }
    warn(msg) {
        this.write("warn", msg);
    }
    error(msg) {
        this.write("error", msg);
    }
    debug(msg) {
        this.write("debug", msg);
    }
}
// Export a shared instance
export const logger = new Logger();
