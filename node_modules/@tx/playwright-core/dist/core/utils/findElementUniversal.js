import { getSelfHealingPage } from "playwright-selfheal-ai";
import { logger } from "../utils/logger.js";
/**
 * Tries multiple locators manually first; if all fail, falls back to AI self-healing.
 */
export async function findElementUniversal(page, locators, elementName = "unknown element", timeout = 5000) {
    let validElement = null;
    // Try manual locators first
    for (const locator of locators) {
        try {
            const element = page.locator(locator);
            await element.waitFor({ state: "attached", timeout });
            logger.info(`Found valid element for "${elementName}" with locator: ${locator}`);
            return element;
        }
        catch {
            logger.warn(`Failed locator for "${elementName}": ${locator}`);
        }
    }
    // If all manual locators fail â†’ use AI self-healing
    try {
        logger.info(`Attempting AI healing for "${elementName}"...`);
        // Initialize self-healing version of the page
        const healingPage = await getSelfHealingPage(page);
        // Try finding via AI (use your first locator as base)
        const aiLocator = healingPage.locator(locators[0]);
        await aiLocator.waitFor({ state: "attached", timeout });
        logger.info(`AI self-healed locator for "${elementName}" successfully.`);
        return aiLocator;
    }
    catch (error) {
        logger.error(` AI self-heal failed for "${elementName}": ${error.message}`);
    }
    logger.error(`No valid locator found for "${elementName}".`);
    throw new Error(`Element not found: ${elementName}`);
}
