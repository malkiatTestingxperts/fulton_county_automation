"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.waitForElementToVisible = waitForElementToVisible;
exports.waitForElementToEnabled = waitForElementToEnabled;
exports.waitForElementToVisibleWithRetry = waitForElementToVisibleWithRetry;
const BrowserManager_1 = require("../BrowserManager");
async function waitForElementToVisible(selector, label) {
    const page = await BrowserManager_1.BrowserManager.getPage();
    await page.locator(selector).isVisible();
}
async function waitForElementToEnabled(selector, label) {
    const page = await BrowserManager_1.BrowserManager.getPage();
    await page.locator(selector).isEnabled();
}
async function waitForElementToVisibleWithRetry(selector, retries = 3, timeout = 25000, delayBetweenRetries = 1000, label = 'element', elemenState = String) {
    const page = await BrowserManager_1.BrowserManager.getPage();
    for (let attempt = 1; attempt <= retries; attempt++) {
        try {
            console.log(`[${label}] Attempt ${attempt}/${retries}: waiting for visible (timeout ${timeout}ms)...`);
            await page.locator(selector).waitFor({ state: 'visible', timeout });
            console.log(`[${label}] Element became visible.`);
            return;
        }
        catch (error) {
            console.warn(`[${label}] Retry ${attempt} failed.`);
            if (attempt === retries) {
                throw new Error(`[${label}] Element not visible after ${retries} retries.\nLast error: ${error}`);
            }
            await new Promise((res) => setTimeout(res, delayBetweenRetries));
        }
    }
}
