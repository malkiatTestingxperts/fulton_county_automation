import { logger } from "../utils/logger.js";
export async function hover(page, selector) {
    try {
        await page.hover(selector);
        logger.info(`Hovered over element: ${selector}`);
    }
    catch (err) {
        logger.error(`Failed to hover over ${selector}: ${err.message}`);
        throw err;
    }
}
/**
 * Scrolls the specified element into view.
 */
export async function scrollIntoView(page, selector) {
    try {
        await page.locator(selector).scrollIntoViewIfNeeded();
        logger.info(`Scrolled into view: ${selector}`);
    }
    catch (err) {
        logger.error(`Failed to scroll into view ${selector}: ${err.message}`);
        throw err;
    }
}
/**
 * Performs drag and drop from source to target selector.
 */
export async function dragAndDrop(page, source, target) {
    try {
        await page.dragAndDrop(source, target);
        logger.info(`Dragged ${source} and dropped onto ${target}`);
    }
    catch (err) {
        logger.error(`Failed to drag ${source} to ${target}: ${err.message}`);
        throw err;
    }
}
/**
 * Checks a checkbox or radio button.
 */
export async function check(page, selector) {
    try {
        await page.check(selector);
        logger.info(`Checked element: ${selector}`);
    }
    catch (err) {
        logger.error(`Failed to check ${selector}: ${err.message}`);
        throw err;
    }
}
/**
 * Unchecks a checkbox.
 */
export async function uncheck(page, selector) {
    try {
        await page.uncheck(selector);
        logger.info(`Unchecked element: ${selector}`);
    }
    catch (err) {
        logger.error(`Failed to uncheck ${selector}: ${err.message}`);
        throw err;
    }
}
