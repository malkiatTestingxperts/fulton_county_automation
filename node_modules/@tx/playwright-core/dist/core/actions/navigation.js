import { logger } from "../utils/logger.js";
/**
 * Navigates to a specific URL
 */
export async function navigateTo(page, url) {
    try {
        await page.goto(url, { waitUntil: "domcontentloaded", timeout: 120000 });
        logger.info(`Navigated to URL: ${url}`);
    }
    catch (err) {
        logger.error(`Failed to navigate to ${url}: ${err.message}`);
        throw err;
    }
}
/**
 * Refreshes the current page.
 */
export async function refreshPage(page, options) {
    try {
        await page.reload({
            waitUntil: options?.waitUntil || "load",
            timeout: options?.timeout || 120000,
        });
        logger.info(`Page refreshed successfully`);
    }
    catch (err) {
        logger.error(`Failed to refresh page: ${err.message}`);
        throw err;
    }
}
/**
 * Navigates back in browser history.
 */
export async function navigateBack(page, options) {
    try {
        await page.goBack({
            waitUntil: options?.waitUntil || "load",
            timeout: options?.timeout || 120000,
        });
        logger.info(`Navigated back successfully`);
    }
    catch (err) {
        logger.error(`Failed to navigate back: ${err.message}`);
        throw err;
    }
}
/**
 * Navigates forward in browser history.
 */
export async function navigateForward(page, options) {
    try {
        await page.goForward({
            waitUntil: options?.waitUntil || "load",
            timeout: options?.timeout || 120000,
        });
        logger.info(`Navigated forward successfully`);
    }
    catch (err) {
        logger.error(`Failed to navigate forward: ${err.message}`);
        throw err;
    }
}
