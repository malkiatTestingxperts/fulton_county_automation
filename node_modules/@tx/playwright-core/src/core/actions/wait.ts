import type { Page } from "@playwright/test";

export async function waitForElementToVisible(page: Page, selector: string, label: string) {
    await page.locator(selector).isVisible();
}

export async function waitForElementToEnabled(page: Page, selector: string, label: string) {
    await page.locator(selector).isEnabled();
}

export async function waitForElementToVisibleWithRetry(page: Page,
    selector: string,
    retries = 3,
    timeout = 25000,
    delayBetweenRetries = 1000,
    label = 'element',
    elemenState = String
): Promise<void> {

    for (let attempt = 1; attempt <= retries; attempt++) {
        try {
            console.log(`[${label}] Attempt ${attempt}/${retries}: waiting for visible (timeout ${timeout}ms)...`);
            await page.locator(selector).waitFor({ state: 'visible', timeout });
            console.log(`[${label}] Element became visible.`);
            return;
        } catch (error) {
            console.warn(`[${label}] Retry ${attempt} failed.`);
            if (attempt === retries) {
                throw new Error(`[${label}] Element not visible after ${retries} retries.\nLast error: ${error}`);
            }
            await new Promise((res) => setTimeout(res, delayBetweenRetries));
        }
    }
}


