"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelfHealingPage = void 0;
const SelfHealingHelper_1 = require("./SelfHealingHelper");
const Logger_1 = require("./Logger");
/**
 * Non-NextGenHeal(AI) SelfHealingPage
 * Wraps Playwright Page and routes all locator actions through HeuristicHeal(Non_AI) SelfHealingHelper
 */
class SelfHealingPage {
    constructor(page, fileName = "healingStore.json") {
        this.page = page;
        this.helper = new SelfHealingHelper_1.SelfHealingHelper(page, fileName);
    }
    /**
     * Returns a proxy Locator wrapper.
     * Any Playwright Locator action (click, fill, type, press, hover, etc.)
     * will automatically run through Non-NextGenHeal(AI) self-healing logic.
     */
    locator(selector) {
        const self = this;
        return new Proxy({}, {
            get(_target, propKey) {
                return async (...args) => {
                    // Resolve the element with self-healing
                    const resolved = await self.helper.find(selector);
                    // Get the method being called (e.g., click, fill, type, hover)
                    const fn = resolved[propKey];
                    if (typeof fn !== "function") {
                        throw new Error(`[SelfHealing] Locator has no method: ${propKey}`);
                    }
                    Logger_1.Logger.debug(`[SelfHealing] Executing ${propKey} on selector: ${selector}`);
                    return fn.apply(resolved, args);
                };
            },
        });
    }
}
exports.SelfHealingPage = SelfHealingPage;
