"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocatorStore = void 0;
// @ts-ignore
const fs = __importStar(require("fs"));
// @ts-ignore
const path = __importStar(require("path"));
class LocatorStore {
    constructor(fileName = "locatorStore.json", directory = process.cwd()) {
        this.store = {};
        this.filePath = path.resolve(directory, fileName);
        if (fs.existsSync(this.filePath)) {
            try {
                this.store = JSON.parse(fs.readFileSync(this.filePath, "utf-8"));
            }
            catch {
                this.store = {};
            }
        }
        this.cleanupStale(); //auto-clean on load
    }
    /**
     * Save or update a locator record in the store
     * - Skips saving if healed element not present in DOM
     * - Stores only working candidates (validated in DOM)
     */
    async saveRecord(page, original, healed, candidates, meta) {
        const healedCount = await page.locator(healed).count();
        if (healedCount === 0) {
            // console.warn(`[LocatorStore] Skipping save: element '${healed}' not found in DOM`);
            return;
        }
        // Filter only working locators
        const workingCandidates = [];
        for (const c of candidates) {
            try {
                const count = await page.locator(c.selector).count();
                if (count > 0) {
                    workingCandidates.push(c);
                }
                else {
                    // console.warn(`[LocatorStore] Skipped dead candidate: ${c.selector}`);
                }
            }
            catch {
                // console.warn(`[LocatorStore] Invalid selector skipped: ${c.selector}`);
            }
        }
        this.store[original] = {
            original,
            healed,
            candidates: workingCandidates,
            meta,
            updatedAt: new Date().toISOString(), //update timestamp
        };
        fs.writeFileSync(this.filePath, JSON.stringify(this.store, null, 2), "utf-8");
        this.cleanupStale(); //auto-clean on save
    }
    /**
     * Get a record by original locator (with meta validation)
     */
    getRecord(original, currentMeta) {
        const record = this.store[original];
        if (!record)
            return undefined;
        // Compare metadata
        const metaChanged = record.meta.tag !== currentMeta.tag ||
            record.meta.text !== currentMeta.text ||
            record.meta.ariaLabel !== currentMeta.ariaLabel ||
            record.meta.role !== currentMeta.role ||
            JSON.stringify(record.meta.attributes) !== JSON.stringify(currentMeta.attributes) ||
            JSON.stringify(record.meta.parent) !== JSON.stringify(currentMeta.parent);
        return metaChanged ? undefined : record;
    }
    /**
     * Get all records
     */
    getAll() {
        // @ts-ignore
        return Object.values(this.store);
    }
    /**
     * Mark candidate as failed
     */
    markCandidateFailed(original, selector) {
        const record = this.store[original];
        if (!record)
            return;
        record.candidates = record.candidates.map((c) => c.selector === selector ? { ...c, failCount: c.failCount + 1 || 1 } : c);
        fs.writeFileSync(this.filePath, JSON.stringify(this.store, null, 2), "utf-8");
    }
    /**
     * Remove stale records not updated in last X days
     */
    cleanupStale(days = 30) {
        const cutoff = Date.now() - days * 24 * 60 * 60 * 1000;
        let removed = 0;
        for (const [key, record] of Object.entries(this.store)) {
            if (new Date(record.updatedAt).getTime() < cutoff) {
                delete this.store[key];
                removed++;
            }
        }
        if (removed > 0) {
            // console.log(`[LocatorStore] Cleaned up ${removed} stale records`);
            fs.writeFileSync(this.filePath, JSON.stringify(this.store, null, 2), "utf-8");
        }
    }
}
exports.LocatorStore = LocatorStore;
