"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocatorStore = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const STORE_PATH = path_1.default.join(process.cwd(), "healingStore.json");
class LocatorStore {
    constructor() {
        this.store = {};
        if (fs_1.default.existsSync(STORE_PATH)) {
            this.store = JSON.parse(fs_1.default.readFileSync(STORE_PATH, "utf-8"));
        }
        this.cleanupStale(); //auto-clean stale entries on load
    }
    get(selector) {
        return this.store[selector];
    }
    save(original, healed, candidates, meta = {}) {
        this.store[original] = {
            original,
            healed,
            candidates,
            meta,
            updatedAt: new Date().toISOString(), //update timestamp
        };
        this.persist();
        this.cleanupStale(); //auto-clean on save
    }
    update(stableKey, original, healed, candidates, meta = {}) {
        this.store[stableKey] = {
            original,
            healed,
            candidates,
            meta,
            updatedAt: new Date().toISOString(), //update timestamp
        };
        this.persist();
        this.cleanupStale(); //auto-clean on update
    }
    list() {
        return this.store;
    }
    /**
     * Remove entries not updated in last X days
     */
    cleanupStale(days = 30) {
        const cutoff = Date.now() - days * 24 * 60 * 60 * 1000;
        let removed = 0;
        for (const [key, entry] of Object.entries(this.store)) {
            if (new Date(entry.updatedAt).getTime() < cutoff) {
                delete this.store[key];
                removed++;
            }
        }
        if (removed > 0) {
            console.log(`[LocatorStore] Cleaned up ${removed} stale entries`);
            this.persist();
        }
    }
    persist() {
        fs_1.default.writeFileSync(STORE_PATH, JSON.stringify(this.store, null, 2));
    }
}
exports.LocatorStore = LocatorStore;
